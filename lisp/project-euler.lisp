;;;; project-euler.lisp

(in-package #:project-euler)

;;; problem solutions.

(defun problem-1 ()
  (let ((sum 0))
    (loop for x from 1 to 999 do
	 (if (or (= 0 (mod x 3))
		 (= 0 (mod x 5)))
	     (incf sum x)))
    sum))


(defun problem-2 ()
  (labels ((problem-2-helper (a b sum)
	     (if (> b 4000000)
		 sum
		 (problem-2-helper b (+ a b) (if (evenp b)
						  (+ sum b)
						  sum)))))
    (problem-2-helper 2 3 2)))

;; What is the largest prime factor of the number 600851475143 ?
(defun problem-3 ()
  (labels ((problem-3-helper (n p)
	     (if (primep n)
		 n
		 (if (= 0 (mod n p))
		     (problem-3-helper (/ n p) p)
		     (problem-3-helper n (next-prime p))))))
    (problem-3-helper 600851475143 2)))


(defun problem-4 ()
  (iter (for x from 999 downto 100)
	(maximize (iter (for y from x downto 100)
			(when (palindromep (* x y))
			  (return (* x y)))
			(finally (return 0))) into largest)
	(when (> largest (* x x))
	  (return largest))
	(finally (return largest))))


;; Problem 5.
;; What is the smallest positive number that is evenly divisible by
;; all of the numbers from 1 to 20?
;;
;; Also known as the least common multiple.
(defun problem-5 ()
  (apply #'lcm (iter (for i from 1 to 20) 
		     (collect i))))  

;; Find the difference between the sum of the squares of the first one
;; hundred natural numbers and the square of the sum.
(defun problem-6 ()
  (- (square (iter (for i from 1 to 100)
		   (summing i)))
     (iter (for i from 1 to 100)
	   (summing (square i)))))

;; What is the 10001^(st) prime number?
(defun problem-7 ()
  (let ((p 2))
    (dotimes (i 10000 p)
      (setf p (next-prime p)))))

;; Find the greatest product of five consecutive digits in the
;; 1000-digit number.
(defun problem-8 ()
  (let ((number 7316717653133062491922511967442657474235534919493496983520312774506326239578318016984801869478851843858615607891129494954595017379583319528532088055111254069874715852386305071569329096329522744304355766896648950445244523161731856403098711121722383113622298934233803081353362766142828064444866452387493035890729629049156044077239071381051585930796086670172427121883998797908792274921901699720888093776657273330010533678812202354218097512545405947522435258490771167055601360483958644670632441572215539753697817977846174064955149290862569321978468622482839722413756570560574902614079729686524145351004748216637048440319989000889524345065854122758866688116427171479924442928230863465674813919123162824586178664583591245665294765456828489128831426076900422421902267105562632111110937054421750694165896040807198403850962455444362981230987879927244284909188845801561660979191338754992005240636899125607176060588611646710940507754100225698315520005593572972571636269561882670428252483600823257530420752963450))
    (iter (for var initially number then (floor (/ var 10)))
	  (until (= 0 var))
	  (maximizing (apply #'* (digits (mod var 100000)))))))

;; There exists exactly one Pythagorean triplet for which a + b + c = 1000.  
;; Find the product abc.
;; According to Euclid a pythagorean triple can be generated with
;; a = m^2 - n^2
;; b = 2mn
;; c = m^2 + n^2
;; (m^2 - n^2) + (2mn) + (m^2 + n^2) = 1000
;; Try until we find the right pair.
(defun problem-9 ()
  (labels ((find-triplet (m n)
	     (let ((a (- (square m)
			 (square n)))
		   (b (* 2 m n))
		   (c (+ (square m)
			 (square n))))
	       (if (= 1000 (+ a b c))
		   (* a b c)
		   (if (= n (1- m))
		       (find-triplet (1+ m) 1)
		       (find-triplet m (1+ n)))))))
    (find-triplet 2 1)))

;; Problem 10.
;; Find the sum of all the primes below two million.
(defun problem-10 (max)
  (reduce #'+ (sieve-of-eratosthenes max)))

;; Problem 11.  
;; The sequence of triangle numbers is generated by
;; adding the natural numbers. So the 7th triangle number would be
;; 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28.  What is the value of the first
;; triangle number to have over five hundred divisors?
(defun problem-12 (n)
  (iter (for i from 1)
	(summing i into tn)
	(when (> (number-of-divisors tn) n)
	  (return tn))))
	  

(defmacro time-problem (form)
  `(let* ((time-before (get-internal-run-time))
	  (result ,form)
	  (time-after (get-internal-run-time)))
     (values (- time-after time-before)
	     result)))

(defmacro run-problem (form)
  `(multiple-value-bind (time result)
       (time-problem ,form)
     (format t "~A => ~D ~50T (in ~F seconds)~%" 
	     ',form result (/ time internal-time-units-per-second))))

(defun all-problems ()
  (run-problem (problem-1))
  (run-problem (problem-2))
  (run-problem (problem-3))
  (run-problem (problem-4))
  (run-problem (problem-5))
  (run-problem (problem-6))
  (run-problem (problem-7))
  (run-problem (problem-8))
  (run-problem (problem-9))
  (run-problem (problem-10 2000000))
  (run-problem (problem-12 500))
  nil)


